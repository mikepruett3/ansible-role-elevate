---
# Pre-Upgrade tasks file for ansible-role-elevate

- name: "Check if machine has functional DNS nameservers"
  shell: ping google.com -c 1

- name: "Import Distribution Prerequisites"
  include_tasks: "{{ ansible_facts['distribution'] }}.yaml"

- name: "Get disk usage for the / (root) mount point"
  shell: df -BG /
  register: output

- name: "Parse free disk space in GB"
  set_fact:
    free_gb: "{{ output.stdout_lines[1].split()[3] | regex_replace('G','') | int }}"
    min_free_gb: 50

- name: "Fail if free disk space is below threshold"
  fail:
    msg: "Not enough disk space on / (root) mount point. Required: {{ min_free_gb }} GB, Available: {{ free_gb }} GB"
  when: free_gb | int < min_free_gb

- name: "Set facts about existing Distribution"
  set_fact:
    existing_distribution: "{{ ansible_facts['distribution'] }}"
    existing_version: "{{ ansible_distribution_version }}"
    existing_major_version: "{{ ansible_distribution_major_version }}"
    existing_kernel_major_version: "{{ ansible_kernel[0] }}"

- name: "Recursively remove any files from the /var/log/leapp directory"
  ansible.builtin.file:
    path: /var/log/leapp
    state: absent

- name: "Remove any left-over packages that cause issues during Distribution upgrade (yum)"
  yum:
    name: "{{ distro }}-logos"
    state: absent
  when:
    - ansible_facts['pkg_mgr'] == 'yum'

- name: "Remove any left-over packages that cause issues during Distribution upgrade (dnf)"
  dnf:
    name: "{{ distro }}-logos"
    state: absent
  when:
    - ansible_facts['pkg_mgr'] == 'dnf'

- name: "Install the ELevate release package (yum)"
  yum:
    name: "http://repo.almalinux.org/elevate/elevate-release-latest-el{{ ansible_distribution_major_version }}.noarch.rpm"
    state: present
  when:
    - ansible_facts['pkg_mgr'] == 'yum'

- name: "Install the ELevate release package (dnf)"
  dnf:
    name: "http://repo.almalinux.org/elevate/elevate-release-latest-el{{ ansible_distribution_major_version }}.noarch.rpm"
    state: present
  when:
    - ansible_facts['pkg_mgr'] == 'dnf'

- name: "Install the leapp upgrade package (yum)"
  yum:
    name: leapp-upgrade
    state: present
  when:
    - ansible_facts['pkg_mgr'] == 'yum'

- name: "Install the leapp upgrade package (dnf)"
  dnf:
    name: leapp-upgrade
    state: present
  when:
    - ansible_facts['pkg_mgr'] == 'dnf'

- name: "Install the leapp data package for the specified upgrade distro (yum)"
  yum:
    name: "leapp-data-{{ distro }}"
    state: present
  when:
    - ansible_facts['pkg_mgr'] == 'yum'

- name: "Install the leapp data package for the specified upgrade distro (dnf)"
  dnf:
    name: "leapp-data-{{ distro }}"
    state: present
  when:
    - ansible_facts['pkg_mgr'] == 'dnf'

- name: "Run a Pre-Upgrade check"
  shell: leapp preupgrade
  register: preupgrade
  failed_when: '"END OF REPORT" not in preupgrade.stdout'
