---
# tasks file for ansible-role-elevate

- name: "Check if machine has functional DNS nameservers"
  shell: ping google.com -c 1

- name: "Import Distribution Prerequisites"
  include_tasks: "{{ ansible_facts['distribution'] }}.yaml"

- name: "Get disk usage for the / (root) mount point"
  shell: df -BG /
  register: output

- name: "Parse free disk space in GB"
  set_fact:
    free_gb: "{{ output.stdout_lines[1].split()[3] | regex_replace('G','') | int }}"
    min_free_gb: 50

- name: "Fail if free disk space is below threshold"
  fail:
    msg: "Not enough disk space on / (root) mount point. Required: {{ min_free_gb }} GB, Available: {{ free_gb }} GB"
  when: free_gb | int < min_free_gb

- name: "Set facts about existing Distribution"
  set_fact:
    existing_distribution: "{{ ansible_facts['distribution'] }}"
    existing_version: "{{ ansible_distribution_version }}"
    existing_major_version: "{{ ansible_distribution_major_version }}"
    existing_kernel_major_version: "{{ ansible_kernel[0] }}"

- name: "Recursively remove any files from the /var/log/leapp directory"
  ansible.builtin.file:
    path: /var/log/leapp
    state: absent

- name: "Remove any left-over packages that cause issues during Distribution upgrade (yum)"
  yum:
    name: "{{ distro }}-logos"
    state: absent
  when:
    - ansible_facts['pkg_mgr'] == 'yum'

- name: "Remove any left-over packages that cause issues during Distribution upgrade (dnf)"
  dnf:
    name: "{{ distro }}-logos"
    state: absent
  when:
    - ansible_facts['pkg_mgr'] == 'dnf'

- name: "Upgrade the system (yum)"
  yum:
    name: '*'
    state: latest
  register: upgrade
  when:
    - ansible_facts['pkg_mgr'] == 'yum'

- name: "Reboot if packages were upgraded (yum)"
  reboot:
  when:
    - upgrade.changed

- name: "Upgrade the system (dnf)"
  dnf:
    name: '*'
    state: latest
  register: upgrade
  when:
    - ansible_facts['pkg_mgr'] == 'dnf'

- name: "Reboot if packages were upgraded (dnf)"
  reboot:
  when:
    - upgrade.changed
    - ansible_distribution_major_version != '8'

- name: "Install the ELevate release package (yum)"
  yum:
    name: "http://repo.almalinux.org/elevate/elevate-release-latest-el{{ ansible_distribution_major_version }}.noarch.rpm"
    state: present
  when:
    - ansible_facts['pkg_mgr'] == 'yum'

- name: "Install the ELevate release package (dnf)"
  dnf:
    name: "http://repo.almalinux.org/elevate/elevate-release-latest-el{{ ansible_distribution_major_version }}.noarch.rpm"
    state: present
  when:
    - ansible_facts['pkg_mgr'] == 'dnf'

- name: "Install the leapp upgrade package (yum)"
  yum:
    name: leapp-upgrade
    state: present
  when:
    - ansible_facts['pkg_mgr'] == 'yum'

- name: "Install the leapp upgrade package (dnf)"
  dnf:
    name: leapp-upgrade
    state: present
  when:
    - ansible_facts['pkg_mgr'] == 'dnf'

- name: "Install the leapp data package for the specified upgrade distro (yum)"
  yum:
    name: "leapp-data-{{ distro }}"
    state: present
  when:
    - ansible_facts['pkg_mgr'] == 'yum'

- name: "Install the leapp data package for the specified upgrade distro (dnf)"
  dnf:
    name: "leapp-data-{{ distro }}"
    state: present
  when:
    - ansible_facts['pkg_mgr'] == 'dnf'

- name: "Import PermitRootLogin playbook"
  include_tasks: "PermitRootLogin.yaml"
  when:
    - ansible_facts['os_family'] == 'RedHat'
    - ansible_distribution_major_version == '7'

- name: "Import AllowZoneDrifting playbook"
  include_tasks: "AllowZoneDrifting.yaml"
  when:
    - ansible_distribution_major_version == '8'

- name: "Import Distribution Fixes"
  include_tasks: "Fixes.yaml"

- name: "Run a Pre-Upgrade check"
  shell: leapp preupgrade
  register: preupgrade
  failed_when: '"END OF REPORT" not in preupgrade.stdout'
  #no_log: true

- name: "Check if leapp-report.txt exists"
  stat:
    path: /var/log/leapp/leapp-report.txt
  register: file_status
  failed_when: not file_status.stat.exists or file_status.stat.size == 0

- name: "Build fix command list based on Pre-Upgrade recommendations"
  shell: cat /var/log/leapp/leapp-report.txt | grep -F [command] | awk '{$1= ""; print $0}'
  register: fix_commands

- name: "Run gathered Pre-Upgrade fixes"
  shell: "{{ item }}"
  #warn: false
  loop: "{{ fix_commands.stdout_lines }}"

- name: "Perform the upgrade"
  shell: leapp upgrade
  register: upgrade
  failed_when: '"Upgrade has been inhibited due to the following problems" in upgrade.stdout'
  #no_log: true

- name: "Import OpenVPN playbook"
  include_tasks: "OpenVPN.yaml"

- name: "Reboot after the upgrade"
  reboot:
    reboot_timeout: 14400
  when:
    - upgrade.changed

- name: "Set fact for the new python interpreter"
  set_fact:
    ansible_python_interpreter: /usr/bin/python3
  when:
    - ansible_facts['os_family'] == 'RedHat'
    - ansible_distribution_major_version == '7'

- name: "Remove exclusion from yum configuration file"
  lineinfile:
    path: /etc/yum.conf
    regexp: '^exclude=.*'
    state: absent

- name: "Remove exclusion from dnf configuration file"
  lineinfile:
    path: /etc/dnf/dnf.conf
    regexp: '^exclude=.*'
    state: absent

- name: "Collect a list of Legacy packages to remove"
  shell: |
    rpm -aq | \
    grep '\.el{{ existing_major_version }}' | \
    grep -Ev '^openvpn(-|$)' | \
    grep -Ev '^pkcs11-helper(-|$)' | \
    grep -Ev '^kernel(-|$)' | \
    sed -E 's/-[0-9][^-]*-[0-9][^-]*\.[^.]+$//' | \
    sort -u
  register: packages

- name: "Set fact for list of Legacy packages to remove"
  set_fact:
    packages: "{{ packages.stdout_lines }}"

- name: "Collect a list of packages to reinstall after"
  shell: |
    rpm -aq | \
    grep '\.el{{ existing_major_version }}' | \
    grep -Ev '^openvpn(-|$)' | \
    grep -Ev '^pkcs11-helper(-|$)' | \
    grep -Ev '^kernel(-|$)' | \
    grep -Ev '^elevate(-|$)' | \
    grep -Ev '^*elevate(-|$)' | \
    grep -Ev '^leapp(-|$)' | \
    grep -Ev '^*leapp(-|$)' | \
    sed -E 's/-[0-9][^-]*-[0-9][^-]*\.[^.]+$//' | \
    sort -u
  register: reinstall

- name: "Set fact for list of packages to reinstall after"
  set_fact:
    reinstall: "{{ reinstall.stdout_lines }}"

- name: "Remove Legacy packages after upgrade"
  dnf:
    name: "{{ item }}"
    state: absent
  ignore_errors: true
  loop: "{{ packages }}"

- name: "Remove Legacy Kernel packages after upgrade"
  dnf:
    name: "kernel*el{{ existing_major_version }}*"
    state: absent
  ignore_errors: true

- name: "Remove bootloader entries for Legacy kernels"
  shell: find /boot/loader/entries/ -type f -name "*-{{ existing_kernel_major_version }}.*" -delete

- name: "Import After upgrade playbook"
  include_tasks: "After.yaml"

- name: "Install newer packages that were previously removed"
  dnf:
    name: "{{ item }}"
    state: present
  ignore_errors: true
  loop: "{{ reinstall }}"

- name: "Cleanup remaining leapp_resume Service"
  service:
    name: leapp_resume
    enabled: false
    state: stopped
  ignore_errors: true

- name: "Reload systemd daemon"
  systemd:
    daemon_reload: true

- name: "Get Facts after upgrade"
  gather_facts:

- name: Display before and after versions
  ansible.builtin.debug:
    msg: "Version before {{ existing_distribution }} {{ existing_version }}.  Version after {{ ansible_facts['distribution'] }} {{ ansible_distribution_version }}."

- name: "Reboot after playbook run"
  reboot:
